// FROM https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm
// AND https://emscripten.org/docs/getting_started/Tutorial.html

#ifdef __EMSCRIPTEN__
#include <emscripten/emscripten.h>
#endif

#include <stdio.h>
#include <random>
#include <SDL2/SDL.h>
#include "../../include/emulator/cpu.h"
#include "../../include/emulator/emulator.h"
#include "../../include/emulator/opcodes_table.h"
#include "../../include/emulator/raw_memory_accessor.h"
#include "../../include/interface/demo_controller.h"
#include "../../include/interface/sdl_video.h"

const int kFPS = 60;
std::random_device r;
std::default_random_engine generator(r());
CPU *cpu = nullptr;
OpCodesInterface *cpu_opcodes = nullptr;
Emulator *emulator = nullptr;
MemoryAccessorInterface *memory = nullptr;
VideoInterface *content_screen = nullptr;
ControllerInterface *controller = nullptr;
bool request_exit = false;

static int SDLCALL HandleExit(void *userdata, SDL_Event * event)
{
    if (event->type == SDL_QUIT) {
        bool *exit = (bool*) userdata;
        *exit = true;
    }
    return 1;  // let all events be added to the queue since we always return 1.
}

void RenderFrame()
{
    // Set Random Number
    std::uniform_int_distribution<uint8_t> uniform_dist(1, 255);
    memory->WriteMemory(0x00fe, uniform_dist(generator));
    controller->WriteInput(0x00ff);
    emulator->AdvanceFrame();
    content_screen->RenderFrame();
}

#ifdef __EMSCRIPTEN__
void RunEmulator()
{
    emscripten_set_main_loop(RenderFrame, kFPS, 1);
}
#else
void RunEmulator()
{
    SDL_SetEventFilter(HandleExit, &request_exit);
    while (!request_exit)
	{
        Uint64 start = SDL_GetPerformanceCounter();
		RenderFrame();
        Uint64 end = SDL_GetPerformanceCounter();
        float elapsed_milliseconds = (end - start) / (float)SDL_GetPerformanceFrequency() * 1000.f;

        //Cap FPS to kFPS
        float delay = floor((1000.f / kFPS) - elapsed_milliseconds);
        if(delay > 0.f)
            SDL_Delay(delay);
	}
}
#endif

int main()
{
    // Initialize
    memory = new RawMemoryAccessor();
    const Byte show_all_colors[] = {0xa9, 0x00, 0x8d, 0x00, 0x02, 0xa9, 0x01, 0x8d, 0x01, 0x02, 0xa9, 0x02, 0x8d, 0x02, 0x02, 0xa9,
                                    0x03, 0x8d, 0x03, 0x02, 0xa9, 0x04, 0x8d, 0x04, 0x02, 0xa9, 0x05, 0x8d, 0x05, 0x02, 0xa9, 0x06,
                                    0x8d, 0x06, 0x02, 0xa9, 0x07, 0x8d, 0x07, 0x02, 0xa9, 0x08, 0x8d, 0x08, 0x02, 0xa9, 0x09, 0x8d,
                                    0x09, 0x02, 0xa9, 0x0a, 0x8d, 0x0a, 0x02, 0xa9, 0x0b, 0x8d, 0x0b, 0x02, 0xa9, 0x0c, 0x8d, 0x0c,
                                    0x02, 0xa9, 0x0d, 0x8d, 0x0d, 0x02, 0xa9, 0x0e, 0x8d, 0x0e, 0x02, 0xa9, 0x0f, 0x8d, 0x0f, 0x02,
                                    0xa9, 0x10, 0x8d, 0x10, 0x02, 0xa9, 0x11, 0x8d, 0x11, 0x02, 0xa9, 0x12, 0x8d, 0x12, 0x02, 0xa9,
                                    0x13, 0x8d, 0x13, 0x02, 0xa9, 0x14, 0x8d, 0x14, 0x02, 0xa9, 0x15, 0x8d, 0x15, 0x02, 0xa9, 0x16,
                                    0x8d, 0x16, 0x02, 0xa9, 0x17, 0x8d, 0x17, 0x02, 0xa9, 0x18, 0x8d, 0x18, 0x02, 0xa9, 0x19, 0x8d,
                                    0x19, 0x02, 0xa9, 0x1a, 0x8d, 0x1a, 0x02, 0xa9, 0x1b, 0x8d, 0x1b, 0x02, 0xa9, 0x1c, 0x8d, 0x1c,
                                    0x02, 0xa9, 0x1d, 0x8d, 0x1d, 0x02, 0xa9, 0x1e, 0x8d, 0x1e, 0x02, 0xa9, 0x1f, 0x8d, 0x1f, 0x02,
                                    0xa9, 0x20, 0x8d, 0x20, 0x02, 0xa9, 0x21, 0x8d, 0x21, 0x02, 0xa9, 0x22, 0x8d, 0x22, 0x02, 0xa9,
                                    0x23, 0x8d, 0x23, 0x02, 0xa9, 0x24, 0x8d, 0x24, 0x02, 0xa9, 0x25, 0x8d, 0x25, 0x02, 0xa9, 0x26,
                                    0x8d, 0x26, 0x02, 0xa9, 0x27, 0x8d, 0x27, 0x02, 0xa9, 0x28, 0x8d, 0x28, 0x02, 0xa9, 0x29, 0x8d,
                                    0x29, 0x02, 0xa9, 0x2a, 0x8d, 0x2a, 0x02, 0xa9, 0x2b, 0x8d, 0x2b, 0x02, 0xa9, 0x2c, 0x8d, 0x2c,
                                    0x02, 0xa9, 0x2d, 0x8d, 0x2d, 0x02, 0xa9, 0x2e, 0x8d, 0x2e, 0x02, 0xa9, 0x2f, 0x8d, 0x2f, 0x02,
                                    0xa9, 0x30, 0x8d, 0x30, 0x02, 0xa9, 0x31, 0x8d, 0x31, 0x02, 0xa9, 0x32, 0x8d, 0x32, 0x02, 0xa9,
                                    0x33, 0x8d, 0x33, 0x02, 0xa9, 0x34, 0x8d, 0x34, 0x02, 0xa9, 0x35, 0x8d, 0x35, 0x02, 0xa9, 0x36,
                                    0x8d, 0x36, 0x02, 0xa9, 0x37, 0x8d, 0x37, 0x02, 0xa9, 0x38, 0x8d, 0x38, 0x02, 0xa9, 0x39, 0x8d,
                                    0x39, 0x02, 0xa9, 0x3a, 0x8d, 0x3a, 0x02, 0xa9, 0x3b, 0x8d, 0x3b, 0x02, 0xa9, 0x3c, 0x8d, 0x3c,
                                    0x02, 0xa9, 0x3d, 0x8d, 0x3d, 0x02, 0xa9, 0x3e, 0x8d, 0x3e, 0x02, 0xa9, 0x3f, 0x8d, 0x3f, 0x02};
    const Byte snake_game[] = {0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9, 0x02, 0x85,
                               0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85,
                               0x14, 0xa9, 0x04, 0x85, 0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe,
                               0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20, 0x8d, 0x06, 0x20, 0xc3,
                               0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5, 0xff, 0xc9,
                               0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60,
                               0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0,
                               0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01, 0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02,
                               0x60, 0xa9, 0x02, 0x24, 0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06,
                               0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07,
                               0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60, 0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06,
                               0xb5, 0x11, 0xc5, 0x11, 0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c,
                               0x35, 0x07, 0x60, 0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02,
                               0x4a, 0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9,
                               0x20, 0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6,
                               0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10, 0xb0,
                               0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29,
                               0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91, 0x00, 0x60,
                               0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10, 0x60, 0xa2, 0x00, 0xea,
                               0xea, 0xca, 0xd0, 0xfb, 0x60, 0xea, 0x4c, 0x35, 0x07};

    memory->WriteMemory(0x0600, snake_game, 309);
    memory->WriteMemory(kReset, (Word)0x0600);
    
    content_screen = new SDLVideo(memory);
    content_screen->InitVideo();

    controller = new DemoController(memory);
    controller->InitController();
    
    cpu = new CPU({.sp = 0xFF}, memory);
    cpu_opcodes = new OpCodesTable();
    cpu->Reset();
    emulator = new Emulator(cpu, cpu_opcodes);

    RunEmulator();
    
    delete controller;
    controller = nullptr;

    delete content_screen;
    content_screen = nullptr;

    delete emulator;
    emulator = nullptr;

    delete cpu_opcodes;
    cpu_opcodes = nullptr;

    delete cpu;
    cpu = nullptr;

    delete memory;
    memory = nullptr;


    return 0;
}