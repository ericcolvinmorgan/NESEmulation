// FROM https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm
// AND https://emscripten.org/docs/getting_started/Tutorial.html

#include <stdio.h>
#include <SDL2/SDL.h>
#include <emscripten/emscripten.h>
#include "../../include/emulator/cpu.h"
#include "../../include/emulator/emulator.h"
#include "../../include/emulator/opcodes_table.h"
#include "../../include/emulator/raw_memory_accessor.h"

const int kScreenWidth = 256;
const int kScreenHeight = 224;
const int kFPS = 10;
const uint8_t kColorMap[192] = 
{ 0x52, 0x52, 0x52, 0x01, 0x1a, 0x51, 0x0f, 0x0f, 
	0x65, 0x23, 0x06, 0x63, 0x36, 0x03, 0x4b, 0x40, 
	0x04, 0x26, 0x3f, 0x09, 0x04, 0x32, 0x13, 0x00, 
	0x1f, 0x20, 0x00, 0x0b, 0x2a, 0x00, 0x00, 0x2f, 
	0x00, 0x00, 0x2e, 0x0a, 0x00, 0x26, 0x2d, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xa0, 0xa0, 0xa0, 0x1e, 0x4a, 0x9d, 0x38, 0x37, 
	0xbc, 0x58, 0x28, 0xb8, 0x75, 0x21, 0x94, 0x84, 
	0x23, 0x5c, 0x82, 0x2e, 0x24, 0x6f, 0x3f, 0x00, 
	0x51, 0x52, 0x00, 0x31, 0x63, 0x00, 0x1a, 0x6b, 
	0x05, 0x0e, 0x69, 0x2e, 0x10, 0x5c, 0x68, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfe, 0xff, 0xff, 0x69, 0x9e, 0xfc, 0x89, 0x87, 
	0xff, 0xae, 0x76, 0xff, 0xce, 0x6d, 0xf1, 0xe0, 
	0x70, 0xb2, 0xde, 0x7c, 0x70, 0xc8, 0x91, 0x3e, 
	0xa6, 0xa7, 0x25, 0x81, 0xba, 0x28, 0x63, 0xc4, 
	0x46, 0x54, 0xc1, 0x7d, 0x56, 0xb3, 0xc0, 0x3c, 
	0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfe, 0xff, 0xff, 0xbe, 0xd6, 0xfd, 0xcc, 0xcc, 
	0xff, 0xdd, 0xc4, 0xff, 0xea, 0xc0, 0xf9, 0xf2, 
	0xc1, 0xdf, 0xf1, 0xc7, 0xc2, 0xe8, 0xd0, 0xaa, 
	0xd9, 0xda, 0x9d, 0xc9, 0xe2, 0x9e, 0xbc, 0xe6, 
	0xae, 0xb4, 0xe5, 0xc7, 0xb5, 0xdf, 0xe4, 0xa9, 
	0xa9, 0xa9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

SDL_Window *window = nullptr;
SDL_Renderer *renderer = nullptr;
SDL_Texture *texture = nullptr;
CPU *cpu = nullptr;
OpCodesInterface *cpu_opcodes = nullptr;
Emulator *emulator = nullptr;
MemoryAccessorInterface *memory = nullptr;

void RenderContent()
{
    emulator->AdvanceFrame();
    printf("CPU PC: %d\n", cpu->GetProgramCounter());
    printf("Byte @ PC: %d\n", memory->ReadByte(cpu->GetProgramCounter()));
    printf("Memory 0x0200: %d\n", memory->ReadByte(0x0200));
    printf("Memory 0x0201: %d\n", memory->ReadByte(0x0201));
    printf("Memory 0x0202: %d\n", memory->ReadByte(0x0202));
    printf("Memory 0x0203: %d\n", memory->ReadByte(0x0203));
    printf("Memory 0x0600: %d\n", memory->ReadByte(0x0600));

    // Clear screen
    SDL_RenderClear(renderer);

    // Load image at specified path
    int width = kScreenWidth / 8;
    int height = kScreenHeight / 8;

    uint8_t *screen = new uint8_t[width * height * 4];

    for (int h = 0; h < height; h++)
    {
        for (int w = 0; w < width; w++)
        {
            uint8_t color = memory->ReadByte(0x0200 + (width * h) + w);
            screen[(h * width * 4) + (w * 4)] = 1;
            screen[(h * width * 4) + (w * 4) + 1] = kColorMap[(color * 3) + 2];
            screen[(h * width * 4) + (w * 4) + 2] = kColorMap[(color * 3) + 1];
            screen[(h * width * 4) + (w * 4) + 3] = kColorMap[(color * 3) + 0];
        }
    }

    SDL_UpdateTexture(texture, NULL, screen, width * 4);
    delete[] screen;

    // Render texture to screen
    SDL_RenderCopy(renderer, texture, NULL, NULL);

    // Update screen
    SDL_RenderPresent(renderer);
}

int main()
{
    // Initialize
    memory = new RawMemoryAccessor();
    const Byte show_all_colors[] = { 0xa9, 0x00, 0x8d, 0x00, 0x02, 0xa9, 0x01, 0x8d, 0x01, 0x02, 0xa9, 0x02, 0x8d, 0x02, 0x02, 0xa9,
                                    0x03, 0x8d, 0x03, 0x02, 0xa9, 0x04, 0x8d, 0x04, 0x02, 0xa9, 0x05, 0x8d, 0x05, 0x02, 0xa9, 0x06,
                                    0x8d, 0x06, 0x02, 0xa9, 0x07, 0x8d, 0x07, 0x02, 0xa9, 0x08, 0x8d, 0x08, 0x02, 0xa9, 0x09, 0x8d,
                                    0x09, 0x02, 0xa9, 0x0a, 0x8d, 0x0a, 0x02, 0xa9, 0x0b, 0x8d, 0x0b, 0x02, 0xa9, 0x0c, 0x8d, 0x0c,
                                    0x02, 0xa9, 0x0d, 0x8d, 0x0d, 0x02, 0xa9, 0x0e, 0x8d, 0x0e, 0x02, 0xa9, 0x0f, 0x8d, 0x0f, 0x02,
                                    0xa9, 0x10, 0x8d, 0x10, 0x02, 0xa9, 0x11, 0x8d, 0x11, 0x02, 0xa9, 0x12, 0x8d, 0x12, 0x02, 0xa9,
                                    0x13, 0x8d, 0x13, 0x02, 0xa9, 0x14, 0x8d, 0x14, 0x02, 0xa9, 0x15, 0x8d, 0x15, 0x02, 0xa9, 0x16,
                                    0x8d, 0x16, 0x02, 0xa9, 0x17, 0x8d, 0x17, 0x02, 0xa9, 0x18, 0x8d, 0x18, 0x02, 0xa9, 0x19, 0x8d,
                                    0x19, 0x02, 0xa9, 0x1a, 0x8d, 0x1a, 0x02, 0xa9, 0x1b, 0x8d, 0x1b, 0x02, 0xa9, 0x1c, 0x8d, 0x1c,
                                    0x02, 0xa9, 0x1d, 0x8d, 0x1d, 0x02, 0xa9, 0x1e, 0x8d, 0x1e, 0x02, 0xa9, 0x1f, 0x8d, 0x1f, 0x02,
                                    0xa9, 0x20, 0x8d, 0x20, 0x02, 0xa9, 0x21, 0x8d, 0x21, 0x02, 0xa9, 0x22, 0x8d, 0x22, 0x02, 0xa9,
                                    0x23, 0x8d, 0x23, 0x02, 0xa9, 0x24, 0x8d, 0x24, 0x02, 0xa9, 0x25, 0x8d, 0x25, 0x02, 0xa9, 0x26,
                                    0x8d, 0x26, 0x02, 0xa9, 0x27, 0x8d, 0x27, 0x02, 0xa9, 0x28, 0x8d, 0x28, 0x02, 0xa9, 0x29, 0x8d,
                                    0x29, 0x02, 0xa9, 0x2a, 0x8d, 0x2a, 0x02, 0xa9, 0x2b, 0x8d, 0x2b, 0x02, 0xa9, 0x2c, 0x8d, 0x2c,
                                    0x02, 0xa9, 0x2d, 0x8d, 0x2d, 0x02, 0xa9, 0x2e, 0x8d, 0x2e, 0x02, 0xa9, 0x2f, 0x8d, 0x2f, 0x02,
                                    0xa9, 0x30, 0x8d, 0x30, 0x02, 0xa9, 0x31, 0x8d, 0x31, 0x02, 0xa9, 0x32, 0x8d, 0x32, 0x02, 0xa9,
                                    0x33, 0x8d, 0x33, 0x02, 0xa9, 0x34, 0x8d, 0x34, 0x02, 0xa9, 0x35, 0x8d, 0x35, 0x02, 0xa9, 0x36,
                                    0x8d, 0x36, 0x02, 0xa9, 0x37, 0x8d, 0x37, 0x02, 0xa9, 0x38, 0x8d, 0x38, 0x02, 0xa9, 0x39, 0x8d,
                                    0x39, 0x02, 0xa9, 0x3a, 0x8d, 0x3a, 0x02, 0xa9, 0x3b, 0x8d, 0x3b, 0x02, 0xa9, 0x3c, 0x8d, 0x3c,
                                    0x02, 0xa9, 0x3d, 0x8d, 0x3d, 0x02, 0xa9, 0x3e, 0x8d, 0x3e, 0x02, 0xa9, 0x3f, 0x8d, 0x3f, 0x02};

    memory->WriteMemory(0x0600, show_all_colors, 320);
    memory->WriteMemory(kReset, (Word)0x0600);

    cpu = new CPU(memory);
    cpu_opcodes = new OpCodesTable();
    cpu->Reset();
    emulator = new Emulator(cpu, cpu_opcodes);

    if (SDL_Init(SDL_INIT_VIDEO) < 0)
    {
        printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
    }
    else
    {
        // Set texture filtering to linear
        SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "0");

        window = SDL_CreateWindow("NES Emulator", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, kScreenWidth, kScreenHeight, SDL_WINDOW_SHOWN);
        if (window == NULL)
        {
            printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
        }
        else
        {
            // Create renderer for window
            renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
            if (renderer == NULL)
            {
                printf("Renderer could not be created! SDL_Error: %s\n", SDL_GetError());
            }
            else
            {
                // Initialize renderer color
                SDL_SetRenderDrawColor(renderer, 251, 120, 67, 1);

                // Create Texture
                texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_STATIC, kScreenWidth / 8, kScreenHeight / 8);
                emscripten_set_main_loop(RenderContent, kFPS, 1);
            }
        }
    }

    // Clean-up
    SDL_DestroyWindow(window);
    SDL_Quit();

    delete memory;
    memory = nullptr;

    delete cpu;
    cpu = nullptr;

    delete cpu_opcodes;
    cpu_opcodes = nullptr;

    delete emulator;
    emulator = nullptr;

    return 0;
}